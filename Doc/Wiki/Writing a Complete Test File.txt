# Writing a Complete Test File
Sanity tests are typically used to test the most basic functionality of a tool.
Simply testing whether or not a tool can be opened is a good sanity test!
We want all sanity tests to be fast so that we can quickly ascertain whether core functionality of the product is broken or not.
Writing a test is a process though, and there is a recommended methodology to that process.

This tutorial will walk you through the creation of a sanity test, from start to finish, which can be used on ArcGIS Online and ArcGIS for Portal.

### Documentation
Your test files should be purposeful and unique.
Creating more than one test file which tests the same work flow is not an efficient use of anyone's time.
To help achieve efficiency, we use documentation.
Documenting your tests will help you and other testers understand the purpose of a test, and will expose any redundancy among test files.

Start with a comment or two about what your test file's purpose is, like this:

```
# Sanity test for running ExtractData.
# Adds data to a map and attempts to open the ExtractData tool to verify the following:
#    * The tool can be opened
#    * The tool can run
```

Remember to edit this anytime you update the code in a test!

### Logging In

There are two major differences between AGOL and Portal: the unique pages, and login credentials.
The framework allows you to create a test file which will work for both environments regardless of these differences.
Use the [```try_start```](https://github.com/DrewOrtego/TORK/wiki/Commands#try_start) and [```try_stop```](https://github.com/DrewOrtego/TORK/wiki/Commands#try_stop) functions to encapsulate the unique work flow.
Do all the non-unique work flows outside of the try block.

```
# Login for AGOL
try_start
click index_signin
fill dlogin_username "username"
fill dlogin_password "password"
click dlogin_signin
try_stop

# Login for all sites
fill username arg_0
fill password arg_1
click signin
sleep 5  # reroute to the Organization page
```

Note that we're still documenting the work flow in the test file itself.
This will help us understand _why_ we have a try-block in case we forget.

This section also contains the [```arg```](https://github.com/DrewOrtego/TORK/wiki/Commands#arg_x) command.
Since we want to have this file run on different environments, we'll need to ensure that the file can use different login credentials.
When you run a test file in Automated Mode, you can provide any string commands unique to a session, and those commands will be assigned an ```arg``` value.

To see an example of this, check out the ```parameters``` dictionary in [main.py](https://devtopia.esri.com/andr7495/Portal-UI-Harness/blob/master/main.py).
Note that each test environment listed there has an ```args``` list.
Each element in that list is assigned to an ```arg``` command followed by its position in the list (starting with 0).
Thus, the GPPortal parameter will assign ```"admin"``` to ```arg_0```, which can then be used to login during an Automated session.


### Opening a Web Map

Now that we're logged-in, we should be on the "Organization" page.
Let's route ourselves to the "WebMap" page by clicking on the corresponding button and giving the page five seconds to load.

```
# Open the webmap page
click header-map  # reroute to the WebMap page
sleep 5
```

The [```sleep```](https://github.com/DrewOrtego/TORK/wiki/Commands#sleep-arbitrary_parameter-number-of-seconds) command here serves the same purpose as the previous one: to ensure that browser has time to load the new page.
Remember that we're _assuming_ the five seconds is sufficient for this.
If this proves to be too short-- aka the page doesn't finish redirecting or loading-- then the next command will fail.
Update your test file if this is the case.

### Adding Data to the Map

Assuming that the amount ```sleep``` time is enough for the "WebMap" page to load, we move onto adding data to the map:

```
# Add data to the map
assert_clickable add  # check whether the add button is "clickable" for 5 seconds
click add
click search-for-layers
fill add-textbox "layer name"
enter add-textbox
assert_clickable add-plus-button-first
click add-plus-button-first  # Assume that the first data set is correct, though it is irrelevant for this test
sleep 3  # Layer must load in map, else ExtractData is grayed out
```

Note the use of an [assertion command](https://github.com/DrewOrtego/TORK/wiki/Commands#assertion-commands) in the first line.
Since the ```add``` button is expected to be on the "WebMap" page, it should render itself successfully within the default five seconds the assert will spend on detecting it.
(We don't use assertions for redirects since they will only check the page which is active when the assertion is called.)

If the ```add``` button is found, we click it, opening a new menu and new set of commands.
Take note of the ```click add-plus-button-first``` line.
This clicks the "add" button of the _first_ result from our query.
For this test, the data doesn't matter.
If you need a specific data set added though, make sure that no others with a similar name exist on the server, or else you could get unexpected results.

### Opening the ExtractData Tool

For our final steps, we'll open the tool and run it.

```
# Open the analysis pane
click analysis

# Portal work flow
try_start
click feature-analysis
try_stop

# Open ExtractData and run it
click manage-data
sleep 1
click extract-data
sleep 1
click first-layer
assert_clickable run-analysis
```

Note that we have another try-block; we'll need to click an extra button when we run this test in Portal.
Otherwise, the work flow is the same for both enviroments.
The [```sleep```](https://github.com/DrewOrtego/TORK/wiki/Commands#sleep-arbitrary_parameter-number-of-seconds) commands gives us a little extra time for new panes to open.
Once the final pane is open we can stop using the ```sleep``` commands.

The last command, [```assert_clickable```](https://github.com/DrewOrtego/TORK/wiki/Commands#assert_clickable-page_element-integer5) can be swapped with [```click```](https://github.com/DrewOrtego/TORK/wiki/Commands#click-page_element).
If either command fails, the framework will tell us.
It's useful to write asserts as a matter of showing intent, but since this test doesn't need to do anything after clicking the ```run-analysis`` button, we might as well end on an assertion command.

### The Completed Test File

```
# Sanity test for running ExtractData.
# Adds data to a map and attempts to open the ExtractData tool to verify the following:
#    * The tool can be opened
#    * The tool can run

# Login for AGOL
try_start
click index_signin
fill dlogin_username "username"
fill dlogin_password "password"
click dlogin_signin
try_stop

# Login for all sites
fill username arg_0
fill password arg_1
click signin
sleep 5  # reroute to the Organization page

# Open the webmap page
click header-map  # reroute to the WebMap page
sleep 5

# Add data to the map
assert_clickable add  # check whether the add button is "clickable" for 5 seconds
click add
click search-for-layers
fill add-textbox "layer name"
enter add-textbox
assert_clickable add-plus-button-first
click add-plus-button-first  # Assume that the first data set is correct, though it is irrelevant for this test
sleep 3  # Layer must load in map, else ExtractData is grayed out

# Open the analysis pane
click analysis

# Portal work flow
try_start
click feature-analysis
try_stop

# Open ExtractData and run it
click manage-data
sleep 1
click extract-data
sleep 1
click first-layer
assert_clickable run-analysis
```